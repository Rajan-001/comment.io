// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model UserInfo{
  id Int @id @default(autoincrement())
  name String 
  password String?
  email String?
  createdAt DateTime
  upadatedAt DateTime @updatedAt
 subscription  Subscription?
 payment Payments[]
 provider String?
  Orders Orders[]
}

model Plan{
  id Int @id @default(autoincrement())
  name String @unique
  price Int
  description String
  subsription Subscription[]
  payment Payments[]

  Orders Orders[]
}

model Subscription{
    id Int @id @default(autoincrement())
    userId Int @unique
    planId Int
    status String @default("active") 
    startDate   DateTime   @default(now())
  endDate     DateTime?
  user        UserInfo       @relation(fields: [userId], references: [id])
  plan        Plan       @relation(fields: [planId], references: [id])
}

model Orders {
  id                Int       @id @default(autoincrement())
  plan_Id           Int
  User_Id           Int
  order_Id          String @unique
  amount            Float
  currency           String
  receipt            String
  status            OrderStatus @default(pending) // PENDING, PAID, FAILED
  createdAt         DateTime  @default(now())

  payments          Payments[]
  user UserInfo @relation(fields: [User_Id], references: [id])
  plan Plan     @relation(fields: [plan_Id], references: [id])
}

model Payments {
  id                Int       @id @default(autoincrement())
  orderId           String
  razorpay_payment_id String   @unique
  razorpay_signature String?
  status            OrderStatus @default(pending) // SUCCESS, REFUNDED, FAILED
  paymentDate       DateTime  @default(now())
  razorpay_order_id String    @unique
  order Orders @relation(fields: [orderId], references: [order_Id])

  UserInfo UserInfo[]

  Plan Plan[]
}


enum OrderStatus {
  pending
  success
  failed
  created
  attempted
  paid
}


